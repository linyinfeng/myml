Counter r =
  class
    { get _ = ! r.x
    , inc _ = r.x := succ (! r.x) } ;;
BackupCounter r =
  class
    inherit Counter r as super
    super extend
      { backup _ =  r.b := ! r.x
      , restore _ = r.x := ! r.b } ;;
ResetCounter r =
  class
    inherit Counter r as super
    super extend
      { reset _ = r.x := 0 } ;;
MixinCounter r =
  class
    inherit Counter r as super
    inherit BackupCounter r as superBackup
    inherit ResetCounter r as superReset
    super extend
      { backup = superBackup.backup
      , restore = superBackup.restore
      , reset = superReset.reset } ;;
Inc2Counter r =
  class
    inherit Counter r as super
    super extend
      { inc2 _ = self.inc (); self.inc () } ;;
Inc2EvenCounter r =
  class
    inherit Inc2Counter r as super
    super update
      { inc _ = super.inc (); super.inc ()
      , inc2 = super.inc2 } ;;

rep = { x = ref 0, b = ref 0 } ;;
counter = new (Counter rep) ;;
backupCounter = new (BackupCounter rep) ;;
resetCounter = new (ResetCounter rep) ;;

incAndGet = Î» c . c.inc (); c.get () ;;
incAndGetCounter = incAndGet counter ;;
incAndGetBackupCounter = incAndGet backupCounter ;;

selectedCounter = if true then resetCounter else backupCounter ;;
incAndGetSelectedCounter = incAndGet selectedCounter ;;
