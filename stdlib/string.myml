import "char.myml" ;;
import "list.myml" ;;
import "function.myml" ;;
import "integer.myml" ;;
import "maybe.myml" ;;

rec stringCompare s1 s2 =
  apply s1
    [ `cons l1 = apply s2
        [ `cons l2 = apply (charCompare l1.head l2.head)
            [ `GT _ = `GT unit
            , `LT _ = `LT unit
            , `EQ _ = stringCompare l1.tail l2.tail ]
        , `nil _   = `GT unit ]
    , `nil _ = apply s2
        [ `cons _ = `LT unit
        , `nil  _ = `EQ unit ]] ;;

stringEq s1 s2 = apply (stringCompare s1 s2)
  [ `LT _ = false
  , `EQ _ = true
  , `GT _ = false ] ;;

rec integerShow n =
  let signum = integerSignum n in
  if integerEq signum 1 then
    let qr = integerQuotRem n 10 in
    let lastDigit = maybeFromJust (digitToChar qr.rem) in
    let front =
      if integerEq qr.quot 0
      then listNil
      else integerShow qr.quot in
    list++ front (listSingleton lastDigit)
  else if integerEq signum -1 then
    listCons '-' (integerShow (integerAbs n))
  else
    "0" ;;
