Counter =
  class
    with r
    { get = λ _ . ! r.x
    , inc = λ _ . r.x := succ (! r.x)
    },
BackupCounter =
  class
    inherit Counter as super
    with r
    { get = super.get
    , inc = super.inc
    , backup = λ _ . r.b := ! r.x
    , restore = λ _ . r.x := ! r.b
    },
ResetCounter =
  class
    inherit Counter as super
    with r
    { get = super.get
    , inc = super.inc
    , reset = λ _ . r.x := 0
    },
MixinCounter =
  class
    inherit Counter as super
    inherit BackupCounter as superBackup
    inherit ResetCounter as superReset
    with r
    { get = super.get
    , inc = super.inc
    , backup = superBackup.backup
    , restore = superBackup.restore
    , reset = superReset.reset
    },
Inc2Counter =
  class
    inherit Counter as super
    with r
    { get = super.get
    , inc = super.inc
    , inc2 = λ _ . self.inc (); self.inc ()
    },
Inc2EvenCounter =
  class
    inherit Inc2Counter as super
    with r
    { get = super.get
    , inc = λ _ . super.inc (); super.inc ()
    , inc2 = super.inc2
    },

rep = { x = ref 0, b = ref 0 },
counter = new Counter rep,
backupCounter = new BackupCounter rep,
resetCounter = new ResetCounter rep,

incAndGet = λ c . c.inc (); c.get (),
incAndGetCounter = incAndGet counter,
incAndGetBackupCounter = incAndGet backupCounter,

selectedCounter = if true then resetCounter else backupCounter,
incAndGetSelectedCounter = incAndGet selectedCounter
